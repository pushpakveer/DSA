void leftside(node * root, vector<int>&ans){
  node * cur=root->left;
  while(cur){
    if(!isleaf(cur)){
      ans.push_back(cur->data);
    }
    if(cur->left){
      cur=cur->left;
    }
    else{
      cur=cur->right;
    }
}


}

void rightside(node * root,vector<int>&ans){
  node *cur=root->right;
  vector<int>temp;
  while(cur){
    if(!isleaf(cur)){
      temp.push_back(cur->data);
    }
    if(cur->right){
      cur=cur->right;
    }
    else{
      cur=cur->left;
    }
  }

   for(int i=temp.size()-1;i>=0;--i){
        ans.push_back(temp[i]);
   }



}

void leafnodes(node* root, vector<int>& ans){
if(isleaf(root)){
  ans.push_back(root->data);
  return;
}
if(root->left){
  leafnodes(root->left,ans);
}
if(root->right){
  leafnodes(root->right,ans);
}
  
}





int main(){
   
struct node *root= new node(1);
root->left=new node(2);
root->right=new node(3);
root->left->left=new node(4);
root->left->left->left=new node(44);
root->left->right=new node(5);
root->right->left=new node(65);
root->right->right=new node(9);

vector<int>ans;
//postorder(root);
//levelorder(root);
// path_find(root,ans,7);

  ans.push_back(root);


leftside(root,ans);
leafnodes(root,ans);
rightside(root,ans);


for(int i=0;i<ans.size();i++){
   cout<<ans[i]<<" ";
}
cout<<endl;
//cout<<heightbalance(root)<<endl;
// vector < vector < int > > vl;
// vl=verticalTraversal(root);

//  cout << "The Vertical Traversal is : " << endl;
//   for (auto vertical: vl) {
//     for (auto nodeVal: vertical) {
//       cout << nodeVal << " ";
//     }
//     cout << endl;
//   }

   return 0;
}