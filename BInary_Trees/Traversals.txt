
### all Traversals..

#include<bits/stdc++.h>
using namespace std;

struct node{
   int data;
   struct node *left;
   struct node *right;
   node(int value){
      data=value;
      left=right=NULL;

   }
};
void preorder(node *root){
   if(root==NULL){
      return;
   }
   cout<<root->data<<endl;
   preorder(root->left);
   preorder(root->right);
}
void postorder(node * root){
   if(root==NULL){
      return;
   }
   postorder(root->left);
   postorder(root->right);
   cout<<root->data<<endl;
}
void inorder(node * root){
   if(root==NULL){
      return;
   }
   inorder(root->left);
    cout<<root->data<<endl;
   inorder(root->right);
  
}

void levelorder(node * root){
queue<node *>q;
q.push(root);
q.push(NULL);
while(!q.empty()){
  node* k=q.front();
   q.pop();
   if(k!=NULL){
   cout<<k->data<<" ";
   if(k->left){
      q.push(k->left);}
 if(k->right){
 q.push(k->right);
   }}

   else if(!q.empty()){
q.push(NULL);
            }
}
}
void left_view(node * root, int level,vector<int>&ans){
   if(root==NULL){
   return;

   }
   
   if(ans.size()==level){
      ans.push_back(root->data);
   }
   left_view(root->left,level+1,ans);
   left_view(root->right,level+1,ans);
}


void right_view(node * root, int level,vector<int>&ans){
   if(root==NULL){
   return;

   }
   
   if(ans.size()==level){
      ans.push_back(root->data);
   }
   right_view(root->right,level+1,ans);
   right_view(root->left,level+1,ans);
   
}

int main(){
   
struct node *root= new node(1);
root->left=new node(2);
root->right=new node(3);
root->left->left=new node(4);
root->left->right=new node(5);
root->left->right->left=new node(6);
vector<int>ans;
//postorder(root);
//levelorder(root);
right_view(root,0,ans);
for(int i=0;i<ans.size();i++){
   cout<<ans[i]<<" ";
}
cout<<endl;

   return 0;
}






