

###Left and Right View of Binary Tree----**


void left_view(node * root, int level,vector<int>&ans){
   if(root==NULL){
   return;

   }
   
   if(ans.size()==level){
      ans.push_back(root->data);
   }
   left_view(root->left,level+1,ans);
   left_view(root->right,level+1,ans);
}


void right_view(node * root, int level,vector<int>&ans){
   if(root==NULL){
   return;

   }
   
   if(ans.size()==level){
      ans.push_back(root->data);
   }
   right_view(root->right,level+1,ans);
   right_view(root->left,level+1,ans);
   
}

int main(){

vector<int>ans;
//postorder(root);
//levelorder(root);
right_view(root,0,ans);
for(int i=0;i<ans.size();i++){
   cout<<ans[i]<<" ";
}
cout<<endl;
}