 TreeNode* deleteNode(TreeNode* root, int key) {
       if(root==NULL){
           return NULL;
       } 
        
       if(root->val==key){
           return built(root);
       }
        
        TreeNode * tosend=root;
        while(root!=NULL){
            
            if(root->val>key){
                if(  root->left!=NULL  &&   root->left->val==key){
                    root->left=built(root->left);
                 break; 
                }
               else{
                   root=root->left;
               }
            }
            
            else{
                 if(  root->right!=NULL &&   root->right->val==key){
                    root->right=built(root->right);
                    break; 
                }
               else{
                   root=root->right;
               }
            }
            
            
         
            
        }
        
           return tosend;
    
        
    }
    
    
    
    
    
    
    TreeNode * built(TreeNode *root){
        
        if(root->left==NULL){
            return root->right;
        }
        else if(root->right==NULL){
            return root->left;
        }
        
        TreeNode *right_sd=root->right;
        TreeNode *end_node=findend(root->left);
        end_node->right=right_sd;
        return root->left;
    }
    
    
    TreeNode * findend(TreeNode * root){
        if(root->right==NULL){
            return root;
        }
        return findend(root->right);
    }