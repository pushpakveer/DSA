
// This is the optimal solution while compared to below 
one...as sorting is performed due to inorder traversal 
reducing our solution to O (N+(NLOGN)) to O(N)

int kthSmallest(TreeNode* root, int k) {
       
       vector<int>ans;
        inorder(root,ans);
        return ans[k-1];
        
        
    }
    
    
    
    void inorder(TreeNode*root,vector<int>&ans){
        if(root==NULL){
            return;
        }
        inorder(root->left,ans);
        ans.push_back(root->val);
        inorder(root->right,ans);
        
        
    }

    //2nd method Non optimal


    int kthSmallest(TreeNode* root, int k) {
       
       vector<int>ans;
        inorder(root,ans);
        
        sort(ans.begin(),ans.end());
        
      
        
        return ans[k-1];
        
        
    }
    
    
    
    void inorder(TreeNode*root,vector<int>&ans){
        if(root==NULL){
            return;
        }
        
        ans.push_back(root->val);
        inorder(root->left,ans);
        inorder(root->right,ans);
        
        
    }
    
